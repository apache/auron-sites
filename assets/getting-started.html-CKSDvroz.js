import{_ as a,c as s,e as n,o as r}from"./app-C2837OC2.js";const t={};function l(o,e){return r(),s("div",null,[...e[0]||(e[0]=[n(`<h1 id="getting-started-with-auron-for-apache-spark" tabindex="-1"><a class="header-anchor" href="#getting-started-with-auron-for-apache-spark"><span>Getting Started with Auron for Apache Spark</span></a></h1><h2 id="build-from-source" tabindex="-1"><a class="header-anchor" href="#build-from-source"><span>Build from source</span></a></h2><p>To build Auron from source, follow the steps below:</p><ol><li>Install Rust</li></ol><p>Auron&#39;s native execution lib is written in Rust. You need to install Rust (nightly) before compiling.</p><p>We recommend using <a href="https://rustup.rs/" target="_blank" rel="noopener noreferrer">rustup</a> for installation.</p><ol start="2"><li>Install JDK</li></ol><p>Auron has been well tested with JDK 8, 11, and 17.</p><p>Make sure <code>JAVA_HOME</code> is properly set and points to your desired version.</p><ol start="3"><li><p>Check out the source code.</p></li><li><p>Build the project.</p></li></ol><p>You can build Auron either <em>locally</em> or <em>inside Docker with CentOS7</em> using a unified script: <code>auron-build.sh</code>.</p><p>Run <code>./auron-build.sh --help</code> to see all available options.</p><p>After the build completes, a fat JAR with all dependencies will be generated in either the <code>target/</code> directory (for local builds) or <code>target-docker/</code> directory (for Docker builds), depending on the selected build mode.</p><h2 id="run-spark-job-with-auron-accelerator" tabindex="-1"><a class="header-anchor" href="#run-spark-job-with-auron-accelerator"><span>Run Spark Job with Auron Accelerator</span></a></h2><p>This section describes how to submit and configure a Spark Job with Auron support.</p><ol><li><p>Move the Auron JAR to the Spark client classpath (normally spark-xx.xx.xx/jars/).</p></li><li><p>Add the following configs to spark configuration in <code>spark-xx.xx.xx/conf/spark-default.conf</code>:</p></li></ol><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token key attr-name">spark.auron.enable</span> <span class="token value attr-value">true</span></span>
<span class="line"><span class="token key attr-name">spark.sql.extensions</span> <span class="token value attr-value">org.apache.spark.sql.auron.AuronSparkSessionExtension</span></span>
<span class="line"><span class="token key attr-name">spark.shuffle.manager</span> <span class="token value attr-value">org.apache.spark.sql.execution.auron.shuffle.AuronShuffleManager</span></span>
<span class="line"><span class="token key attr-name">spark.memory.offHeap.enabled</span> <span class="token value attr-value">false</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># suggested executor memory configuration</span></span>
<span class="line"><span class="token key attr-name">spark.executor.memory</span> <span class="token value attr-value">4g</span></span>
<span class="line"><span class="token key attr-name">spark.executor.memoryOverhead</span> <span class="token value attr-value">4096</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>submit a query with spark-sql, or other tools like spark-thriftserver:</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">spark-sql <span class="token parameter variable">-f</span> tpcds/q01.sql</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,19)])])}const p=a(t,[["render",l]]),c=JSON.parse('{"path":"/documents/getting-started.html","title":"Getting-Started","lang":"en-US","frontmatter":{"title":"Getting-Started"},"headers":[{"level":2,"title":"Build from source","slug":"build-from-source","link":"#build-from-source","children":[]},{"level":2,"title":"Run Spark Job with Auron Accelerator","slug":"run-spark-job-with-auron-accelerator","link":"#run-spark-job-with-auron-accelerator","children":[]}],"git":{},"filePathRelative":"documents/getting-started.md"}');export{p as comp,c as data};
